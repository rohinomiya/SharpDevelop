<?xml version="1.0"?>
<Template originator = "Rohinomiya"
          created      = "2012/09/09"
          lastModified = "2012/09/09">
	
	<!-- Template Header -->
	<TemplateConfiguration>
		<Name>${res:Templates.Project.WindowsApplication.Name}(with log4net)</Name>
		<Category>C#</Category>
		<Subcategory>${res:Templates.File.Categories.WindowsApplications}</Subcategory>
		<Icon>C#.Project.Form</Icon>
		<Description>${res:Templates.Project.WindowsApplication.Description}(with log4net)</Description>
		<SupportedTargetFrameworks>v2.0;v3.5Client</SupportedTargetFrameworks>
	</TemplateConfiguration>
	
	<!-- Actions -->
	<Actions>
		<Open filename = "MainForm.cs"/>
	</Actions>
	
	<Project language = "C#">
		<ProjectItems>
			<Reference Include="System" />
			<Reference Include="System.Core" />
			<Reference Include="System.Data" />
			<Reference Include="System.Drawing" />
			<Reference Include="System.Windows.Forms" />
			<Reference Include="System.Xml" />
			<Reference Include="log4net">
				<HintPath>C:\Program Files\SharpDevelop\4.2\data\templates\project\CSharp\log4net.dll</HintPath>
				<SpecificVersion>False</SpecificVersion>
				<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
				<Private>True</Private>
			</Reference>
			<Reference Include="NDesk.Options">
				<HintPath>C:\Program Files\SharpDevelop\4.2\data\templates\project\CSharp\NDesk.Options.dll</HintPath>
				<SpecificVersion>False</SpecificVersion>
				<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
				<Private>True</Private>
			</Reference>
		</ProjectItems>

		<PropertyGroup>
			<OutputType>WinExe</OutputType>
			<TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
			<TargetFrameworkProfile></TargetFrameworkProfile>
			<AppDesignerFolder>Properties</AppDesignerFolder>
		</PropertyGroup>

		<Files>
			<File name="Program.cs" language="C#"><![CDATA[${StandardHeader.C#}
using log4net;
using NDesk.Options;
using Rohinomiya;	// my namespace
using System;
using System.Windows.Forms;

namespace ${StandardNamespace}
{
	/// <summary>
	/// Class with program entry point.
	/// </summary>
	internal sealed class Program
	{
		/// <summary>
		/// Program entry point.
		/// </summary>
		[STAThread]
		private static void Main(string[] args)
		{
			HandlerForUnhandledException.GetInstance().HandleUnhandledException();
					
			// TODO: edit output directory in Log4Net.Config.xml
			//ILog logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
			ILog logger = NullLogger.GetInstance();
			
			// TODO: refactor Configuration class
			bool verbose = false;
			bool recursive = false;
			string output_dir = "";

			List<string> extraCommandLineArgs = new List<string>();

			// define command line options
			var p = new OptionSet()
				.Add ("v|version",    dummy => { ShowHelp(); Environment.Exit(0); } )
				.Add ("?|h|help",     dummy => { ShowHelp(); Environment.Exit(0); } )
				.Add ("verbose",          v => { if(v!=null) verbose = true; }      )
				.Add ("o=|output_dir=", dir => { if(dir!=null) output_dir = dir; }  )
				.Add ("r|recursive",      r => { if(r!=null) recursive = true; }    )
				;

			try {
				// extraCommandLineArgs = commandLineArgs except options
				extraCommandLineArgs = p.Parse(Environment.GetCommandLineArgs());
			}
			catch(Exception ex){
				Console.WriteLine(ex.Message);
				Environment.Exit(0);
			}
			
			// todo: parse result 
			Console.WriteLine(String.Format("verbose={0}",verbose.ToString()));
			Console.WriteLine(String.Format("recursive={0}",recursive.ToString()));
			Console.WriteLine(String.Format("output_dir={0}",output_dir));
			
			int index = 0;
			foreach (var arg in extraCommandLineArgs) {
				Console.WriteLine(String.Format("arg[{0}]={1}",index,arg));
				index++;
			}
			Application.EnableVisualStyles();
			Application.SetCompatibleTextRenderingDefault(false);
			Application.Run(new MainForm());
		}
		
		/// <summary>
		/// Show Help
		/// </summary>
		public static void ShowHelp()
		{
			Console.WriteLine("This is help message.");
		}
	}
}
]]></File>
			<File name="MainForm.cs" language="C#"><![CDATA[${StandardHeader.C#}
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace ${StandardNamespace}
{
	/// <summary>
	/// Description of MainForm.
	/// </summary>
	public partial class MainForm : Form
	{
		public MainForm()
		{
			//
			// The InitializeComponent() call is required for Windows Forms designer support.
			//
			InitializeComponent();
			
			//
			// TODO: Add constructor code after the InitializeComponent() call.
			//
		}
	}
}
]]></File>
			<File name="MainForm.Designer.cs" DependentUpon="MainForm.cs" language="C#"><![CDATA[${StandardHeader.C#}
namespace ${StandardNamespace}
{
	partial class MainForm
	{
		/// <summary>
		/// Designer variable used to keep track of non-visual components.
		/// </summary>
		private System.ComponentModel.IContainer components = null;
		
		/// <summary>
		/// Disposes resources used by the form.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing)
		{
			if (disposing) {
				if (components != null) {
					components.Dispose();
				}
			}
			base.Dispose(disposing);
		}
		
		/// <summary>
		/// This method is required for Windows Forms designer support.
		/// Do not change the method contents inside the source code editor. The Forms designer might
		/// not be able to load this method if it was changed manually.
		/// </summary>
		private void InitializeComponent()
		{
			// 
			// MainForm
			// 
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Text = "${ProjectName}";
			this.Name = "MainForm";
		}
	}
}
]]></File>
			<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfoLog4Net.cs"/>
			<File name="ClassNullLogger.cs" src="ClassNullLogger.cs"/>
			<File name="Log4net.Config.xml" src="Log4net.Config.xml"/>
			<File name="ClassHandlerForUnhandledException.cs" src="ClassHandlerForUnhandledException.cs"/>
		</Files>
	</Project>
</Template>
